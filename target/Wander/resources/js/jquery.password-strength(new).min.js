
(function($) { 
	var password_Strength = new function() { 
	
	
		this.countRegExp = function(passwordVal, regx) 
			{ var match = passwordVal.match(regx);
				return match ? match.length : 0;
			};

			this.getStrengthInfo = function(passwordVal) 
			
				{ 	var len = passwordVal.length; 
					var pStrength = 0; 
					var msg = "", inValidChars = ""; 
					var allowableSpecilaChars = new RegExp("[" + password_settings.specialChars + "]", "g");
					var nums = this.countRegExp(passwordVal, /\d/g), lowers = this.countRegExp(passwordVal, /[a-z]/g), uppers = this.countRegExp(passwordVal, /[A-Z]/g), specials = this.countRegExp(passwordVal, allowableSpecilaChars), spaces = this.countRegExp(passwordVal, /\s/g);
					inValidChars = passwordVal.replace(/[a-z]/gi, "") + inValidChars.replace(/\d/g, ""); 
					inValidChars = inValidChars.replace(/\d/g, ""); 
					inValidChars = inValidChars.replace(allowableSpecilaChars, "");
						if (spaces > 0) 
							{ return "No spaces!"; 
							} 	
								if (inValidChars !== "") 
									{ return "Invalid character: " + inValidChars; 
									}	
										if (len > password_settings.maxLength) 
											{
												return "Password too long!";
											}
										if ((specials + uppers + nums + lowers) < password_settings.minLength)
											{ 
												msg += password_settings.minLength - (specials + uppers + nums + lowers) + " more characters, "; 
											}
										if (specials == 0 || uppers == 0 || nums == 0 || lowers == 0) 
											{ msg += "At least "; 
											} 
										if (nums >= password_settings.numberLength) 
													{ nums = password_settings.numberLength; 
													}
										else 
											{
												msg += (password_settings.numberLength - nums) + " more numbers, ";
											} 
										if (specials >= password_settings.specialLength)
											{
												specials = password_settings.specialLength; 
											} 
										else 
											{
												msg += (password_settings.specialLength - specials) + " more symbol, ";
											} 
										if (uppers >= password_settings.upperLength) 
											{
												uppers = password_settings.upperLength; 
											}
										else { msg += (password_settings.upperLength - uppers) + " Upper case characters, ";
											}
										if ((len - (uppers + specials + nums)) >= (password_settings.minLength - password_settings.numberLength - password_settings.specialLength - password_settings.upperLength)) 
											{ 
												pStrength += (password_settings.minLength - password_settings.numberLength - password_settings.specialLength - password_settings.upperLength); 
											}
										else 
											{
												pStrength += (len - (uppers + specials + nums)); 
											}
											pStrength += uppers + specials + nums;
											if (lowers == 0) 
											{ 
												if (pStrength > 1) { pStrength -= 1; } 
												msg += "1 lower case character, "; 
											}
										
											if (pStrength == password_settings.minLength && lowers > 0)
											{ 
											msg = "Strong password!"; 
											} 
											return msg + ";" + pStrength;
								}; 
					};
										var password_settings = { minLength: 12, maxLength: 25, specialLength: 2, upperLength: 1, numberLength: 1, barWidth: 200, barColor: "green", specialChars: "!@#$%*()_+^&;:?", metRequirement: false, useMultipleColors: 1 }; 
								
									$.fn.password_strength = function(password) 
										{
										
										password_settings.minLength = parseInt(password.minLength);
									      password_settings.maxLength = parseInt(password.maxLength); 
										  password_settings.specialLength = parseInt(password.specialLength); 
										  password_settings.upperLength = parseInt(password.upperLength); 
										  password_settings.numberLength = parseInt(password.numberLength);
											
										
											this.metReq = function() 
											{ return password_settings.metRequirement;
											};

																			
											return this.each(function()
												{ var barLeftPos = $("[id$='" + this.id + "']").position().left + $("[id$='" + this.id + "']").width();
												var barTopPos = $("[id$='" + this.id + "']").position().top + $("[id$='" + this.id + "']").height();
												var container = $("<span></span>").css({ position: "absolute", top: barTopPos - 6, left: barLeftPos + 15, "font-size": "75%", display: "inline-block", width: password_settings.barWidth + 40 }); $(this).after(container); var passIndi = $('<div id="PasswordStrengthBorder"></div><div id="PasswordStrengthBar" class="BarIndicator"></div>').css({ position: "absolute", display: "none" }).eq(0).css({ height: 3, top: barTopPos - 16, left: barLeftPos + 25, "border-style": "solid", "border-width": 1, padding: 2 }).end().eq(1).css({ height: 5, top: barTopPos - 14, left: barLeftPos + 25 }).end(); 
												container.before(passIndi); 
												$(this).keyup(function() 
												{ var passwordVal = $(this).val(); password_settings.metRequirement = false; 
												if (passwordVal.length > 0) 
													{ 
														var msgNstrength = password_Strength.getStrengthInfo(passwordVal);
														var msgNstrength_array = msgNstrength.split(";"), strengthPercent = 0, barWidth = password_settings.barWidth, backColor = password_settings.barColor; 
															if (msgNstrength_array.length > 1) 
																{ 
																	strengthPercent = (msgNstrength_array[1] / password_settings.minLength) * barWidth;
																	
																}
																$("[id$='PasswordStrengthBorder']").css({ display: "inline", width: barWidth });

																if (password_settings.useMultipleColors == "1") 
																{ 
																	if (parseInt(strengthPercent) >= 0 && parseInt(strengthPercent) <= (barWidth * 0.59)) 
																		{
																			backColor = "red"; 
																		} 
																	else 
																		{ 
																			if (parseInt(strengthPercent) >= (barWidth * 0.60) && parseInt(strengthPercent) <= (barWidth * 0.99)) 
																				{
																					backColor = "yellow"; 
																				} 
																			else 
																				{ backColor = password_settings.barColor; 
																				} 
																		} 
																} 
																	$("[id$='PasswordStrengthBar']").css({ display: "inline", width: strengthPercent, "background-color": backColor });
																	
															if (msgNstrength_array[0].lastIndexOf(",") !== -1) 
																{
																	container.text(msgNstrength_array[0].substring(0, msgNstrength_array[0].length - 2)); 
																}
															else 
																{ 
																	container.text(msgNstrength_array[0]); 
																} 
															if (strengthPercent == barWidth) 
																{
																	password_settings.metRequirement = true; 
																} 
													} 
														else 
														{ 
															container.text("");
															$("[id$='PasswordStrengthBorder']").css("display", "none"); $("[id$='PasswordStrengthBar']").css("display", "none"); 
														} 
												}); 
												
											}); 
										}; 
														
			})(jQuery);